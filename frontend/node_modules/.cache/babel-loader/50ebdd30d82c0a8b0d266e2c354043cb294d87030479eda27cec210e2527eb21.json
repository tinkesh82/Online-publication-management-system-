{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\trial\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from \"react\";\nimport authService from \"../api/authService\";\nimport LoadingSpinner from \"../components/LoadingSpinner\"; // Optional: for initial load\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const [loading, setLoading] = useState(true); // For initial check\n\n  const initializeAuth = useCallback(async () => {\n    if (token) {\n      try {\n        const currentUser = await authService.getCurrentUser(); // Fetches /me and updates localStorage\n        setUser(currentUser);\n      } catch (error) {\n        console.error(\"Failed to initialize auth:\", error);\n        authService.logout(); // Clear invalid token/user\n        setToken(null);\n        setUser(null);\n      }\n    }\n    setLoading(false);\n  }, [token]);\n  useEffect(() => {\n    initializeAuth();\n  }, [initializeAuth]);\n  const login = async credentials => {\n    const data = await authService.login(credentials);\n    setUser({\n      _id: data._id,\n      username: data.username,\n      email: data.email,\n      role: data.role\n    });\n    setToken(data.token);\n    return data; // Return full response for potential messages\n  };\n  const register = async userData => {\n    const data = await authService.register(userData);\n    setUser({\n      _id: data._id,\n      username: data.username,\n      email: data.email,\n      role: data.role\n    });\n    setToken(data.token);\n    return data; // Return full response\n  };\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    setToken(null);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this); // Or any other loading indicator\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      register,\n      logout,\n      isAuthenticated: !!token,\n      loading,\n      initializeAuth\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"ZhIkUkQSlthYGuGNfUMqBHLz364=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","authService","LoadingSpinner","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","initializeAuth","currentUser","getCurrentUser","error","console","logout","login","credentials","data","_id","username","email","role","register","userData","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","isAuthenticated","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/trial/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from \"react\";\r\nimport authService from \"../api/authService\";\r\nimport LoadingSpinner from \"../components/LoadingSpinner\"; // Optional: for initial load\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n  const [loading, setLoading] = useState(true); // For initial check\r\n\r\n  const initializeAuth = useCallback(async () => {\r\n    if (token) {\r\n      try {\r\n        const currentUser = await authService.getCurrentUser(); // Fetches /me and updates localStorage\r\n        setUser(currentUser);\r\n      } catch (error) {\r\n        console.error(\"Failed to initialize auth:\", error);\r\n        authService.logout(); // Clear invalid token/user\r\n        setToken(null);\r\n        setUser(null);\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    initializeAuth();\r\n  }, [initializeAuth]);\r\n\r\n  const login = async (credentials) => {\r\n    const data = await authService.login(credentials);\r\n    setUser({\r\n      _id: data._id,\r\n      username: data.username,\r\n      email: data.email,\r\n      role: data.role,\r\n    });\r\n    setToken(data.token);\r\n    return data; // Return full response for potential messages\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    const data = await authService.register(userData);\r\n    setUser({\r\n      _id: data._id,\r\n      username: data.username,\r\n      email: data.email,\r\n      role: data.role,\r\n    });\r\n    setToken(data.token);\r\n    return data; // Return full response\r\n  };\r\n\r\n  const logout = () => {\r\n    authService.logout();\r\n    setUser(null);\r\n    setToken(null);\r\n  };\r\n\r\n  if (loading) {\r\n    return <LoadingSpinner />; // Or any other loading indicator\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        token,\r\n        login,\r\n        register,\r\n        logout,\r\n        isAuthenticated: !!token,\r\n        loading,\r\n        initializeAuth,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}