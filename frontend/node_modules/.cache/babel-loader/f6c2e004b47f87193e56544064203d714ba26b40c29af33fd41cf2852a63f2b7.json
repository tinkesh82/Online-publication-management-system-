{"ast":null,"code":"import axiosInstance from \"./axiosInstance\";\n\n// Admin: Add a new reviewer (or user with role 'reviewer')\nconst addReviewer = async userData => {\n  // userData: { username, email, password } backend sets role to 'reviewer'\n  const response = await axiosInstance.post(\"/users/add-reviewer\", userData);\n  return response.data;\n};\n\n// Admin: Add a new user (general purpose, role can be specified)\n// This endpoint is not explicitly in backend, but /users/:id (PUT) could set role.\n// For now, we use addReviewer for specific purpose. A general add user might be:\nconst addUser = async userDataWithRole => {\n  // For this to work, your backend should allow creating users with specific roles by admin\n  // Let's assume your backend userController.js has a general createUserByAdmin or similar\n  // or you adapt the registerUser logic to allow admin to specify role.\n  // As it stands, the backend has /users/add-reviewer.\n  // To make a general add user:\n  // 1. Modify backend authController.registerUser to allow admin to pass role for any user.\n  // 2. Or create a new admin route POST /api/users for generic user creation by admin.\n  // For now, this function will be a placeholder or call register with admin privileges.\n\n  // This is a conceptual example; needs backend support if not using add-reviewer specifically.\n  // const response = await axiosInstance.post('/users', userDataWithRole); // hypothetical\n  // return response.data;\n  if (userDataWithRole.role === \"reviewer\") {\n    return addReviewer(userDataWithRole);\n  }\n  // For other roles, requires backend adjustment or using update user on a newly registered basic user.\n  console.warn(\"General addUser with role needs backend support. Using addReviewer for 'reviewer' role.\");\n  throw new Error(\"General addUser with role requires backend implementation or use addReviewer.\");\n};\n\n// Admin: Get all users (can filter by role)\nconst getAllUsers = async (role = null) => {\n  const params = role ? {\n    role\n  } : {};\n  const response = await axiosInstance.get(\"/users\", {\n    params\n  });\n  return response.data;\n};\n\n// Admin: Get user by ID\nconst getUserById = async id => {\n  const response = await axiosInstance.get(`/users/${id}`);\n  return response.data;\n};\n\n// Admin: Update user details or role\nconst updateUser = async (id, userData) => {\n  // userData: { username, email, role }\n  const response = await axiosInstance.put(`/users/${id}`, userData);\n  return response.data;\n};\n\n// Admin: Delete a user\nconst deleteUser = async id => {\n  const response = await axiosInstance.delete(`/users/${id}`);\n  return response.data;\n};\nconst userService = {\n  addReviewer,\n  addUser,\n  // conceptual\n  getAllUsers,\n  getUserById,\n  updateUser,\n  deleteUser\n};\nexport default userService;","map":{"version":3,"names":["axiosInstance","addReviewer","userData","response","post","data","addUser","userDataWithRole","role","console","warn","Error","getAllUsers","params","get","getUserById","id","updateUser","put","deleteUser","delete","userService"],"sources":["C:/Users/DELL/Desktop/trial/frontend/src/api/userService.js"],"sourcesContent":["import axiosInstance from \"./axiosInstance\";\r\n\r\n// Admin: Add a new reviewer (or user with role 'reviewer')\r\nconst addReviewer = async (userData) => {\r\n  // userData: { username, email, password } backend sets role to 'reviewer'\r\n  const response = await axiosInstance.post(\"/users/add-reviewer\", userData);\r\n  return response.data;\r\n};\r\n\r\n// Admin: Add a new user (general purpose, role can be specified)\r\n// This endpoint is not explicitly in backend, but /users/:id (PUT) could set role.\r\n// For now, we use addReviewer for specific purpose. A general add user might be:\r\nconst addUser = async (userDataWithRole) => {\r\n  // For this to work, your backend should allow creating users with specific roles by admin\r\n  // Let's assume your backend userController.js has a general createUserByAdmin or similar\r\n  // or you adapt the registerUser logic to allow admin to specify role.\r\n  // As it stands, the backend has /users/add-reviewer.\r\n  // To make a general add user:\r\n  // 1. Modify backend authController.registerUser to allow admin to pass role for any user.\r\n  // 2. Or create a new admin route POST /api/users for generic user creation by admin.\r\n  // For now, this function will be a placeholder or call register with admin privileges.\r\n\r\n  // This is a conceptual example; needs backend support if not using add-reviewer specifically.\r\n  // const response = await axiosInstance.post('/users', userDataWithRole); // hypothetical\r\n  // return response.data;\r\n  if (userDataWithRole.role === \"reviewer\") {\r\n    return addReviewer(userDataWithRole);\r\n  }\r\n  // For other roles, requires backend adjustment or using update user on a newly registered basic user.\r\n  console.warn(\r\n    \"General addUser with role needs backend support. Using addReviewer for 'reviewer' role.\"\r\n  );\r\n  throw new Error(\r\n    \"General addUser with role requires backend implementation or use addReviewer.\"\r\n  );\r\n};\r\n\r\n// Admin: Get all users (can filter by role)\r\nconst getAllUsers = async (role = null) => {\r\n  const params = role ? { role } : {};\r\n  const response = await axiosInstance.get(\"/users\", { params });\r\n  return response.data;\r\n};\r\n\r\n// Admin: Get user by ID\r\nconst getUserById = async (id) => {\r\n  const response = await axiosInstance.get(`/users/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Admin: Update user details or role\r\nconst updateUser = async (id, userData) => {\r\n  // userData: { username, email, role }\r\n  const response = await axiosInstance.put(`/users/${id}`, userData);\r\n  return response.data;\r\n};\r\n\r\n// Admin: Delete a user\r\nconst deleteUser = async (id) => {\r\n  const response = await axiosInstance.delete(`/users/${id}`);\r\n  return response.data;\r\n};\r\n\r\nconst userService = {\r\n  addReviewer,\r\n  addUser, // conceptual\r\n  getAllUsers,\r\n  getUserById,\r\n  updateUser,\r\n  deleteUser,\r\n};\r\n\r\nexport default userService;\r\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,iBAAiB;;AAE3C;AACA,MAAMC,WAAW,GAAG,MAAOC,QAAQ,IAAK;EACtC;EACA,MAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACI,IAAI,CAAC,qBAAqB,EAAEF,QAAQ,CAAC;EAC1E,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA,MAAMC,OAAO,GAAG,MAAOC,gBAAgB,IAAK;EAC1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA,IAAIA,gBAAgB,CAACC,IAAI,KAAK,UAAU,EAAE;IACxC,OAAOP,WAAW,CAACM,gBAAgB,CAAC;EACtC;EACA;EACAE,OAAO,CAACC,IAAI,CACV,yFACF,CAAC;EACD,MAAM,IAAIC,KAAK,CACb,+EACF,CAAC;AACH,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG,MAAAA,CAAOJ,IAAI,GAAG,IAAI,KAAK;EACzC,MAAMK,MAAM,GAAGL,IAAI,GAAG;IAAEA;EAAK,CAAC,GAAG,CAAC,CAAC;EACnC,MAAML,QAAQ,GAAG,MAAMH,aAAa,CAACc,GAAG,CAAC,QAAQ,EAAE;IAAED;EAAO,CAAC,CAAC;EAC9D,OAAOV,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,MAAMU,WAAW,GAAG,MAAOC,EAAE,IAAK;EAChC,MAAMb,QAAQ,GAAG,MAAMH,aAAa,CAACc,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EACxD,OAAOb,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,MAAMY,UAAU,GAAG,MAAAA,CAAOD,EAAE,EAAEd,QAAQ,KAAK;EACzC;EACA,MAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACkB,GAAG,CAAC,UAAUF,EAAE,EAAE,EAAEd,QAAQ,CAAC;EAClE,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,MAAMc,UAAU,GAAG,MAAOH,EAAE,IAAK;EAC/B,MAAMb,QAAQ,GAAG,MAAMH,aAAa,CAACoB,MAAM,CAAC,UAAUJ,EAAE,EAAE,CAAC;EAC3D,OAAOb,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMgB,WAAW,GAAG;EAClBpB,WAAW;EACXK,OAAO;EAAE;EACTM,WAAW;EACXG,WAAW;EACXE,UAAU;EACVE;AACF,CAAC;AAED,eAAeE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}