{"ast":null,"code":"import axiosInstance from \"./axiosInstance\";\nconst API_BASE_URL = process.env.REACT_APP_BASE_URL; // For PDF links\n\n// Public: Get published publications\nconst getPublishedPublications = async (params = {}) => {\n  // params: { category, title, authorName, doi, year, startYear, endYear, specificDate, startDate, endDate, sortBy, page, limit }\n  const response = await axiosInstance.get(\"/publications\", {\n    params\n  });\n  return response.data;\n};\n\n// Public/Protected: Get a single publication by ID\nconst getPublicationById = async id => {\n  const tokenForThisCall = localStorage.getItem(\"token\"); // Get token right before the call\n  console.log(`PUBLICATION_SERVICE (getPublicationById for ID: ${id}): Token from localStorage JUST BEFORE this specific Axios call: ${tokenForThisCall ? \"EXISTS\" : \"MISSING/NULL\"}`);\n  const response = await axiosInstance.get(`/publications/${id}`);\n  axiosInstance.get(`/publications/${id}`); // The actual call\n  console.log(`PUBLICATION_SERVICE (getPublicationById for ID: ${id}): Axios response received:`, response);\n  return response.data;\n};\n\n// User: Create a new publication\nconst createPublication = async formData => {\n  // formData should be an instance of FormData\n  const response = await axiosInstance.post(\"/publications\", formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  });\n  return response.data;\n};\n\n// User: Get their own publications\nconst getMyPublications = async () => {\n  const response = await axiosInstance.get(\"/publications/my-publications\");\n  return response.data;\n};\n\n// User/Admin: Update a publication\nconst updatePublication = async (id, formData) => {\n  // formData should be an instance of FormData\n  const response = await axiosInstance.put(`/publications/${id}`, formData, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  });\n  return response.data;\n};\n\n// User: Delete their own publication (if not published)\nconst deletePublication = async id => {\n  const response = await axiosInstance.delete(`/publications/${id}`);\n  return response.data;\n};\n\n// Reviewer/Admin: Get review queue\nconst getReviewQueue = async () => {\n  const response = await axiosInstance.get(\"/publications/review/queue\");\n  return response.data;\n};\n\n// Reviewer/Admin: Submit a review\nconst submitReview = async (id, reviewData) => {\n  // reviewData: { status, reviewerComments }\n  const response = await axiosInstance.put(`/publications/review/${id}`, reviewData);\n  return response.data;\n};\n\n// Admin: Get all publications for management\nconst adminGetAllPublications = async (params = {}) => {\n  // params: { status, category, publisherId, reviewerId, page, limit, sortBy, sortOrder }\n  const response = await axiosInstance.get(\"/publications/admin/all\", {\n    params\n  });\n  return response.data;\n};\n\n// Admin: Delete any publication\nconst adminDeletePublication = async id => {\n  const response = await axiosInstance.delete(`/publications/admin/${id}`);\n  return response.data;\n};\nconst getPublicationPdfUrl = contentPath => {\n  if (!contentPath) return \"#\";\n  return `${API_BASE_URL}${contentPath.startsWith(\"/\") ? contentPath : \"/\" + contentPath}`;\n};\nconst publicationService = {\n  getPublishedPublications,\n  getPublicationById,\n  createPublication,\n  getMyPublications,\n  updatePublication,\n  deletePublication,\n  getReviewQueue,\n  submitReview,\n  adminGetAllPublications,\n  adminDeletePublication,\n  getPublicationPdfUrl\n};\nexport default publicationService;","map":{"version":3,"names":["axiosInstance","API_BASE_URL","process","env","REACT_APP_BASE_URL","getPublishedPublications","params","response","get","data","getPublicationById","id","tokenForThisCall","localStorage","getItem","console","log","createPublication","formData","post","headers","getMyPublications","updatePublication","put","deletePublication","delete","getReviewQueue","submitReview","reviewData","adminGetAllPublications","adminDeletePublication","getPublicationPdfUrl","contentPath","startsWith","publicationService"],"sources":["C:/Users/DELL/Desktop/trial/frontend/src/api/publicationService.js"],"sourcesContent":["import axiosInstance from \"./axiosInstance\";\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_BASE_URL; // For PDF links\r\n\r\n// Public: Get published publications\r\nconst getPublishedPublications = async (params = {}) => {\r\n  // params: { category, title, authorName, doi, year, startYear, endYear, specificDate, startDate, endDate, sortBy, page, limit }\r\n  const response = await axiosInstance.get(\"/publications\", { params });\r\n  return response.data;\r\n};\r\n\r\n// Public/Protected: Get a single publication by ID\r\nconst getPublicationById = async (id) => {\r\n  const tokenForThisCall = localStorage.getItem(\"token\"); // Get token right before the call\r\n  console.log(\r\n    `PUBLICATION_SERVICE (getPublicationById for ID: ${id}): Token from localStorage JUST BEFORE this specific Axios call: ${\r\n      tokenForThisCall ? \"EXISTS\" : \"MISSING/NULL\"\r\n    }`\r\n  );\r\n  const response = await axiosInstance.get(`/publications/${id}`);\r\n  axiosInstance.get(`/publications/${id}`); // The actual call\r\n  console.log(\r\n    `PUBLICATION_SERVICE (getPublicationById for ID: ${id}): Axios response received:`,\r\n    response\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// User: Create a new publication\r\nconst createPublication = async (formData) => {\r\n  // formData should be an instance of FormData\r\n  const response = await axiosInstance.post(\"/publications\", formData, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// User: Get their own publications\r\nconst getMyPublications = async () => {\r\n  const response = await axiosInstance.get(\"/publications/my-publications\");\r\n  return response.data;\r\n};\r\n\r\n// User/Admin: Update a publication\r\nconst updatePublication = async (id, formData) => {\r\n  // formData should be an instance of FormData\r\n  const response = await axiosInstance.put(`/publications/${id}`, formData, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// User: Delete their own publication (if not published)\r\nconst deletePublication = async (id) => {\r\n  const response = await axiosInstance.delete(`/publications/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Reviewer/Admin: Get review queue\r\nconst getReviewQueue = async () => {\r\n  const response = await axiosInstance.get(\"/publications/review/queue\");\r\n  return response.data;\r\n};\r\n\r\n// Reviewer/Admin: Submit a review\r\nconst submitReview = async (id, reviewData) => {\r\n  // reviewData: { status, reviewerComments }\r\n  const response = await axiosInstance.put(\r\n    `/publications/review/${id}`,\r\n    reviewData\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Admin: Get all publications for management\r\nconst adminGetAllPublications = async (params = {}) => {\r\n  // params: { status, category, publisherId, reviewerId, page, limit, sortBy, sortOrder }\r\n  const response = await axiosInstance.get(\"/publications/admin/all\", {\r\n    params,\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Admin: Delete any publication\r\nconst adminDeletePublication = async (id) => {\r\n  const response = await axiosInstance.delete(`/publications/admin/${id}`);\r\n  return response.data;\r\n};\r\n\r\nconst getPublicationPdfUrl = (contentPath) => {\r\n  if (!contentPath) return \"#\";\r\n  return `${API_BASE_URL}${\r\n    contentPath.startsWith(\"/\") ? contentPath : \"/\" + contentPath\r\n  }`;\r\n};\r\n\r\nconst publicationService = {\r\n  getPublishedPublications,\r\n  getPublicationById,\r\n  createPublication,\r\n  getMyPublications,\r\n  updatePublication,\r\n  deletePublication,\r\n  getReviewQueue,\r\n  submitReview,\r\n  adminGetAllPublications,\r\n  adminDeletePublication,\r\n  getPublicationPdfUrl,\r\n};\r\n\r\nexport default publicationService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}