{"ast":null,"code":"import axiosInstance from \"./axiosInstance\";\nconst register = async userData => {\n  const response = await axiosInstance.post(\"/auth/register\", userData);\n  if (response.data.token) {\n    localStorage.setItem(\"token\", response.data.token);\n    // You might want to store user object or role separately if needed frequently\n    localStorage.setItem(\"user\", JSON.stringify({\n      _id: response.data._id,\n      username: response.data.username,\n      email: response.data.email,\n      role: response.data.role\n    }));\n  }\n  return response.data;\n};\nconst login = async userData => {\n  const response = await axiosInstance.post(\"/auth/login\", userData);\n  if (response.data.token) {\n    localStorage.setItem(\"token\", response.data.token);\n    localStorage.setItem(\"user\", JSON.stringify({\n      _id: response.data._id,\n      username: response.data.username,\n      email: response.data.email,\n      role: response.data.role\n    }));\n  }\n  return response.data;\n};\nconst logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"user\");\n};\nconst getCurrentUser = async () => {\n  try {\n    const response = await axiosInstance.get(\"/auth/me\");\n    if (response.data.success && response.data.data) {\n      localStorage.setItem(\"user\", JSON.stringify(response.data.data));\n      return response.data.data;\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Failed to fetch current user\", error);\n    logout(); // Clear local storage if 'me' fails\n    return null;\n  }\n};\nconst getStoredUser = () => {\n  const user = localStorage.getItem(\"user\");\n  return user ? JSON.parse(user) : null;\n};\nconst authService = {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  getStoredUser\n};\nexport default authService;","map":{"version":3,"names":["axiosInstance","register","userData","response","post","data","token","localStorage","setItem","JSON","stringify","_id","username","email","role","login","logout","removeItem","getCurrentUser","get","success","error","console","getStoredUser","user","getItem","parse","authService"],"sources":["C:/Users/DELL/Desktop/trial/frontend/src/api/authService.js"],"sourcesContent":["import axiosInstance from \"./axiosInstance\";\r\n\r\nconst register = async (userData) => {\r\n  const response = await axiosInstance.post(\"/auth/register\", userData);\r\n  if (response.data.token) {\r\n    localStorage.setItem(\"token\", response.data.token);\r\n    // You might want to store user object or role separately if needed frequently\r\n    localStorage.setItem(\r\n      \"user\",\r\n      JSON.stringify({\r\n        _id: response.data._id,\r\n        username: response.data.username,\r\n        email: response.data.email,\r\n        role: response.data.role,\r\n      })\r\n    );\r\n  }\r\n  return response.data;\r\n};\r\n\r\nconst login = async (userData) => {\r\n  const response = await axiosInstance.post(\"/auth/login\", userData);\r\n  if (response.data.token) {\r\n    localStorage.setItem(\"token\", response.data.token);\r\n    localStorage.setItem(\r\n      \"user\",\r\n      JSON.stringify({\r\n        _id: response.data._id,\r\n        username: response.data.username,\r\n        email: response.data.email,\r\n        role: response.data.role,\r\n      })\r\n    );\r\n  }\r\n  return response.data;\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"token\");\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\nconst getCurrentUser = async () => {\r\n  try {\r\n    const response = await axiosInstance.get(\"/auth/me\");\r\n    if (response.data.success && response.data.data) {\r\n      localStorage.setItem(\"user\", JSON.stringify(response.data.data));\r\n      return response.data.data;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch current user\", error);\r\n    logout(); // Clear local storage if 'me' fails\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getStoredUser = () => {\r\n  const user = localStorage.getItem(\"user\");\r\n  return user ? JSON.parse(user) : null;\r\n};\r\n\r\nconst authService = {\r\n  register,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  getStoredUser,\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,iBAAiB;AAE3C,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EACnC,MAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACI,IAAI,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;EACrE,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;IACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IAClD;IACAC,YAAY,CAACC,OAAO,CAClB,MAAM,EACNC,IAAI,CAACC,SAAS,CAAC;MACbC,GAAG,EAAER,QAAQ,CAACE,IAAI,CAACM,GAAG;MACtBC,QAAQ,EAAET,QAAQ,CAACE,IAAI,CAACO,QAAQ;MAChCC,KAAK,EAAEV,QAAQ,CAACE,IAAI,CAACQ,KAAK;MAC1BC,IAAI,EAAEX,QAAQ,CAACE,IAAI,CAACS;IACtB,CAAC,CACH,CAAC;EACH;EACA,OAAOX,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMU,KAAK,GAAG,MAAOb,QAAQ,IAAK;EAChC,MAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACI,IAAI,CAAC,aAAa,EAAEF,QAAQ,CAAC;EAClE,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;IACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IAClDC,YAAY,CAACC,OAAO,CAClB,MAAM,EACNC,IAAI,CAACC,SAAS,CAAC;MACbC,GAAG,EAAER,QAAQ,CAACE,IAAI,CAACM,GAAG;MACtBC,QAAQ,EAAET,QAAQ,CAACE,IAAI,CAACO,QAAQ;MAChCC,KAAK,EAAEV,QAAQ,CAACE,IAAI,CAACQ,KAAK;MAC1BC,IAAI,EAAEX,QAAQ,CAACE,IAAI,CAACS;IACtB,CAAC,CACH,CAAC;EACH;EACA,OAAOX,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMW,MAAM,GAAGA,CAAA,KAAM;EACnBT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;EAChCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;AAED,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMH,aAAa,CAACmB,GAAG,CAAC,UAAU,CAAC;IACpD,IAAIhB,QAAQ,CAACE,IAAI,CAACe,OAAO,IAAIjB,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MAC/CE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC,CAAC;MAChE,OAAOF,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpDL,MAAM,CAAC,CAAC,CAAC,CAAC;IACV,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMO,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,IAAI,GAAGjB,YAAY,CAACkB,OAAO,CAAC,MAAM,CAAC;EACzC,OAAOD,IAAI,GAAGf,IAAI,CAACiB,KAAK,CAACF,IAAI,CAAC,GAAG,IAAI;AACvC,CAAC;AAED,MAAMG,WAAW,GAAG;EAClB1B,QAAQ;EACRc,KAAK;EACLC,MAAM;EACNE,cAAc;EACdK;AACF,CAAC;AAED,eAAeI,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}